{
  "name": "pyRevit",
  "tagline": "IronPython UI generator and script library for Autodesk Revit®",
  "body": "# pyRevit for Autodesk Revit®\r\n\r\n##What is pyRevit:\r\n\r\n- In it's simplest form, it's a folder filled with `.py` IronPython scripts for Revit.\r\n- There is also an IronPython script `__init__.py` that creates UI buttons for your IronPython scripts at Revit startup. Creating a button is as easy as adding a python script file to the pyRevit folder and reloading pyRevit. See below on how to add your scripts.\r\n\r\n## Installation:\r\n[![package](http://eirannejad.github.io/pyRevit/images/Software%20Box-48.png)  \r\n**DOWNLOAD SETUP PACKAGE**](https://github.com/eirannejad/pyRevit/releases/download/Setup/pyRevitPackage.zip)\r\n\r\n- Download the setup package, extract to your machine and place under a folder of your choice.\r\n- Run `Setup.bat` and all scripts will be downloaded to this folder.\r\n- Setup script will create the necessary `.addin` file for Revit 2015 and 2016 to load the scripts at Revit startup.\r\n- Run Revit and pyRevit will automatically load.\r\n\r\nThis package installs a tiny addin on your Revit that its sole purpose in life is to run the `__init__.py` at Revit startup. This addin is named [RevitPythonLoader](https://github.com/eirannejad/revitpythonloader) and is a fork of [RevitPythonShell](https://github.com/architecture-building-systems/revitpythonshell). How does it find the `__init__.py` you ask? Through a windows environment variable called `%pyRevit%` that it also automatically creates at installation. This variable points to the folder containing the `__init__.py` file.\r\n\r\nNeil Reilly has prepared a handy video taking you through the installation and showing some of the more useful tools. Click here to go to his Youtube page and watch the video.\r\n\r\n[![NeilReillyVideo](http://img.youtube.com/vi/71rvCspWNHs/0.jpg)](https://www.youtube.com/watch?v=71rvCspWNHs)\r\n\r\n**About Versioning:** I'm using semantic versioning with MAJOR.MINOR.PATCH format. (MAJOR: incompatible API changes, MINOR: add functionality and scripts in a backwards-compatible manner, PATCH: backwards-compatible bug fixes). You can see your pyRevit version under `Settings -> aboutPyRevit`\r\n\r\n## Using the scripts:\r\nAfter you installed pyRevit and launched Revit, the startup script will find all the individual scripts and creates the UI buttons for the commands.\r\n\r\nJust click on the pyRevit tab and click on the command you'd like run. Most command names are self-explanatory but there is a tooltip on the more complicated commands that describes the function. This tooltip is created from `__doc__` string inside each `.py` file.\r\n\r\n## Adding your own scripts:\r\n\r\nThe `__init__.py` startup script will setup a ribbon panel named 'pyRevit' (After the folder name that contains the scripts). There are 5 ways to add buttons to this ribbon panel and categorize them under sub-panels.\r\n\r\n####All the methods listed below, require a 32x32 pixel `.png` image file that will be used as the icon for the button or button group.\r\n\r\n***\r\n###Creating Pull Down Buttons:\r\n![PulldownDemo](http://eirannejad.github.io/pyRevit/images/pulldownbuttondemo.png)  \r\n\r\n- **Step 1:** Create a `.png` file, with this naming pattern:\r\n`<00 Panel Order><00 Button Order>_<Panel Name>_PulldownButton_<Button Group Name>.png`\r\n  \r\n  **Example:**  \r\n  `1003_Selection_PulldownButton_Filter.png`  \r\n  This `.png` file, defines a sub-panel under `pyRevit` ribbon panel named `Selection`, and a `PulldownButton` named `Filter` under this panel. Startup script will use the order numbers to sort the panels and buttons and later to create them in order.\r\n\r\n- **Step 2:** All `.py` script under the home directory should have the below name pattern:\r\n`<Button Group Name>_<Script Command Name>.py`.  \r\nFor the example above, any script that its name starts with `Filter_` will be added to this PullDown button.\r\n\r\nScripts will be organized under the group button specified in the source file name. For example a script file named `Filter_filterGroupedElements.py` will be placed under group button `Filter` (defined by the `.png` above) and its command name will be `filterGroupedElements`. The `.png` file defining the Pulldown Button will be used as button icon by default, however, if there is a `.png` file with a matching name to a script, that `.png` file will override the default image and will be used as the button icon.\r\n\r\n###Split Buttons: Creating Pull Down buttons that remember the last clicked button\r\nSame as Method 1 except it will create Split Buttons (The last selected sub-item will be the default active item).\r\n\r\nFor a SplitButton, create a `.png` file, with this naming pattern:\r\n`<00 Panel Order><00 Button Order>_<Panel Name>_SplitButton_<Button Group Name>.png`\r\n\r\n![SplitDemo](http://eirannejad.github.io/pyRevit/images/splitbuttondemo.png)  \r\n\r\n***\r\n###Creating Push Buttons:  \r\n![PushbuttonDemo](http://eirannejad.github.io/pyRevit/images/pushbuttondemo.png)  \r\n\r\n- **Step 1:** Create a `.png` file, with this naming pattern:\r\n`<00 Panel Order><00 Button Order>_<Panel Name>_PushButton_<Button Name>.png`\r\n\r\n\t**Example:**  \r\n\t`1005_Revit_PushButton_BIM.png` defines a sub-panel under `pyRevit` named `Revit`, and a simple Push Buttons in this panel named `BIM`. The startup script will expect to find only one script with name pattern similar to Method 1, and will assign it to this push button.\r\n\r\n- **Step 2:** All `.py` script under the home directory should have the below name pattern:\r\n`<Button Group Name>_<Script Command Name>.py`.  \r\nFor the example above, `BIM_getCentralPath.py` will be assigned to the push button described above. The button name will be `getCentralPath`.\r\n\r\n####Link Buttons: Creating Push Buttons that Run other Addin's Commands\r\nThis button is very similar to a PushButton except that it creates a link to a command of any other addin.  \r\nCreate a `.png` file, with the same naming pattern as Method 1, but also add `<Assembly Name>` and `<C# Class Name>` to the filename separated by `_`.\r\n\r\n**Example:**  \r\n`0000_RPS_PushButton_RPS_RevitPythonShell_IronPythonConsoleCommand.png`\r\n\r\nThis defines a sub-panel under `pyRevit`, named `RPS`, and a simple Push Buttons in this panel, named `RPS`. But then the startup script will use the `<Assembly Name>` and `<C# Class Name>` and will look for the referenced addin and class. If this addin has been already loaded into Revit, the startup script will assign the `<C# Class Name>` to this button. In this example, startup script will create a button that opens the 'Interactive Python Shell' from RevitPythonShell addin.\r\n\r\nAnother example of this method is `0005_RL_PushButton_Lookup_RevitLookup_CmdSnoopDb.png` that will create a button calling the 'Snoop DB' command of the [RevitLookup](https://github.com/jeremytammik/RevitLookup) addin.\r\n\r\nNotice that this type of button does not need any external scripts. This single `.png` file has all the necessary information for this link button.\r\n\r\n***\r\n###Creating Stack of Push Buttons:\r\n![Stack3Demo](http://eirannejad.github.io/pyRevit/images/stackthreedemo.png)\r\n\r\n- **Step 1:** Create a `.png` file, with this naming pattern:\r\n`<00 Panel Order><00 Button Order>_<Panel Name>_Stack3_<Stack Name>.png`  \r\n\r\n\t**Example:**  \r\n\t`1005_Selection_Stack3_Inspect.png` defines a sub-panel under `pyRevit`named `Selection`, and 3 Stacked Buttons in this panel. For a Stack3 button group, the startup script will expect to find exactly 3 scripts to be categorized under this stack. The actual stack name will be ignored since the stack doesn't have any visual representation other then the 3 buttons stacked in 3 rows.\r\n\r\n- **Step 2:** All `.py` script under the home directory should have the below name pattern:\r\n`<Button Group Name>_<Script Command Name>.py`.  \r\nIn this example the 3 scripts below will be used to create 3 buttons in this stack (sorted alphabetically):\r\n\r\n\t`Inspect_findLinkedElements.py`  \r\n\t`Inspect_findListOfViewsShowingElement.py`  \r\n\t`Inspect_findPaintedSurfacesOnSelected.py`  \r\n\r\n\r\n## Reloading the scripts library:\r\n![ReloadScripts](http://eirannejad.github.io/pyRevit/images/reloadScripts.png)\r\n\r\npyRevit commands only keep a link to the actual IronPython script file. Revit reads and runs the script file any time the user clicks on the corresponding button. This means you can edit any script while Revit is running and the next time you click on the corresponding script button, Revit will run the modified script file.\r\n\r\nIf you added scripts or panels while Revit is running, use the `reloadScripts` button from the `Settings` group to reload the changes. It'll search for the scripts and will update the buttons, disabling the missing and adding the newly found.\r\n\r\n## Keeping your library up to date:\r\nUse the `downloadUpdates` button under the `Settings` pull down to fetch all the recent changes from the github repository.\r\n\r\n![DownloadUpdates](http://eirannejad.github.io/pyRevit/images/downloadUpdates.png)\r\n\r\n**pyRevit** will open a window and will fetch the most recent changes from the github repository. Keep in mind that the changes you have made to the original scripts included in the library will be overwritten. Any extra scripts and file will remain intact. After the update, click on Reload Scripts to get buttons for any newly added script.\r\n\r\n![FetchingUpdates](http://eirannejad.github.io/pyRevit/images/fetchingupdates.png)\r\n\r\n\r\n## Reinstall / Uninstall:\r\nRun `Setup.bat` and it'll prompt you that the pyRevit or RevitPythonLoader folders already exist and if you want to Reinstall pyRevit. If you answer yes, it'll delete the folders and re-clones the github repositories just like a fresh install.\r\n \r\n![Reinstall](http://eirannejad.github.io/pyRevit/images/reinstall.png)\r\n\r\nIf you answer No, It'll ask you if you want to uninstall the tool. The setup script will remove the `.addin` files and `%pyrevit%` environment variable when uninstalling pyRevit.\r\n\r\n![Reinstall](http://eirannejad.github.io/pyRevit/images/uninstallComplete.png)\r\n\r\n\r\n## Contribute\r\n\r\n- Issue Tracker: https://github.com/eirannejad/pyRevit/issues\r\n- Source Code: https://github.com/eirannejad/pyRevit\r\n\r\nAnd please feel free to fork, modify and add your own scripts, and send me pull requests. I'd be thrilled to add more tools and scripts to this for everyone to use.\r\n\r\n## Support\r\n\r\n[stackoverflow](http://stackoverflow.com) (Note: use `pyRevit` tag)\r\n\r\n## License\r\n\r\nThis package is licensed under  GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007.\r\nSee LICENSE.md for full license text.\r\nSee [this](http://choosealicense.com/) page for more help on licensing your work.\r\n\r\n## Credits\r\n\r\nI'd like to thank people listed here for their great contributions:\r\n\r\n- [Daren Thomas](https://github.com/daren-thomas) (original version, maintainer of [RevitPythonShell](https://github.com/architecture-building-systems/revitpythonshell)) for creating RPS and helping me.\r\n- [Jeremy Tammik](https://github.com/jeremytammik) (creator and maintainer of [RevitLookup](https://github.com/jeremytammik/RevitLookup))\r\n- [Icons8](https://icons8.com/) for the beautiful icons.\r\n- [ThubanPDX](https://github.com/ThubanPDX). For testing and new ideas for tools and scripts.\r\n- Neil Reilly for the handy introduction and installation [video](https://www.youtube.com/watch?v=71rvCspWNHs).\r\n- [git-scm](https://git-scm.com) for the open source, portable git for windows.\r\n\r\n**NOTE**: If you are not on this list, but believe you should be, please contact me!\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}