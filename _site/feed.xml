<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyRevit blog</title>
    <description>IronPython scripts for Autodesk Revit
</description>
    <link>http://eirannejad.github.io/pyRevit/</link>
    <atom:link href="http://eirannejad.github.io/pyRevit/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Jun 2017 00:19:04 -0700</pubDate>
    <lastBuildDate>Thu, 15 Jun 2017 00:19:04 -0700</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Show Nested Groups Update</title>
        <description>&lt;p&gt;I updated the &lt;code class=&quot;highlighter-rouge&quot;&gt;Show Nested Group Structure&lt;/code&gt; tool today. Now it does what it’s supposed to do and also prints a nicer output with links to the groups:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/shownestedgroupstruct2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This tool works on selected elements of any kind (as long as they’re groupable) and is very helpful in finding out the group structure around selected elements.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;And here is where the tool is:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/shownestedgroupstruct1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 May 2017 11:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/05/17/nestedgroupsupdate.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/05/17/nestedgroupsupdate.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>pyCon, YouTube and Patreon</title>
        <description>&lt;p&gt;&lt;strong&gt;Excitement:&lt;/strong&gt;
This weekend is &lt;a href=&quot;https://us.pycon.org/2017/&quot;&gt;pyCon 2017&lt;/a&gt; and is happening right here in Portland, Oregon for the second year. I’m really excited to go and learn from python masters.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;And now, to the usual updates:&lt;/p&gt;

&lt;h3 id=&quot;youtube-channel&quot;&gt;YouTube Channel:&lt;/h3&gt;
&lt;p&gt;pyRevit now has a Youtube channel. You can find a link to the channel in the left side bar. I’ve already started posting quick tutorials on the more important tools. I’ll also be gradually compiling a series of videos on python scripting for Autodesk Revit. Please subscribe and stay tunes. I’m looking forward to hearing your feedbacks.&lt;/p&gt;

&lt;h3 id=&quot;patreon-page&quot;&gt;Patreon Page:&lt;/h3&gt;
&lt;p&gt;I have also created an account on Patreon website and those of you who are truly in love with pyRevit can sign up there to support the project. All the proceedings will be used to make pyRevit better and to support the community around python scripting for Revit. You can find a link to the Patreon page on the side bar as well.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Stay creative…&lt;/p&gt;
</description>
        <pubDate>Tue, 16 May 2017 11:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/pycon/2017/05/16/pyconandpatrons.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/pycon/2017/05/16/pyconandpatrons.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>pycon</category>
        
      </item>
    
      <item>
        <title>pdxRUG Presentation</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/Portland-Revit-User-Group/&quot;&gt;Portland Revit User Group (pdxRUG)&lt;/a&gt; kindly allowed me to present pyRevit changes and updates at their April 2017 gathering. It went well except for me saying &lt;strong&gt;‘stuff like that’&lt;/strong&gt; too many times, and other bold statements which I’m sure I need to apologize for some of them someday. Forgive me Autodesk for I have sinned. :P&lt;/p&gt;

&lt;p&gt;Anyway I had a good chance to talk about scripting for Revit basics and introduction to pyRevit tools. I also explained the overall structure of scripts and the usage logging system.&lt;/p&gt;

&lt;p&gt;This partial video is about half-hour of the presentation on the basics of scripting for Revit and introduction to pyRevit, installation and configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=EdDLgSrtOiI&amp;amp;t=39s&quot;&gt;Link to Youtube Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also explained some of the tools but when editing the video, I realized it’s better if I create a pyRevit youtube channel and actually post short videos on some of the more important tools. This way they’ll be easier to find and watch. I was also running Revit in virtual machine on an Macbook and didn’t have a proper Revit file open for tool presentation.&lt;/p&gt;

&lt;p&gt;Therefore:&lt;/p&gt;

&lt;p&gt;I ended up cutting all the tool presentation out of this video and I’ll be posting individual tutorial videos about them shortly.&lt;/p&gt;

&lt;p&gt;Thanks again to &lt;a href=&quot;https://www.meetup.com/Portland-Revit-User-Group/&quot;&gt;pdxRUG&lt;/a&gt; and the attendees for joining me and for their questions and suggestions.&lt;/p&gt;

&lt;p&gt;Please subscribe and stay tuned!&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Apr 2017 11:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/video/2017/04/26/pdxrugpresentation.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/video/2017/04/26/pdxrugpresentation.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>video</category>
        
      </item>
    
      <item>
        <title>revitutils loves RPW</title>
        <description>&lt;p&gt;I’ve added some stuff to the &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; module but there is something that I need to talk to you about before you start using these features:&lt;/p&gt;

&lt;h3 id=&quot;fact-1&quot;&gt;Fact 1&lt;/h3&gt;

&lt;p&gt;Currently there is a very useful, powerfull, and easy to use python module to interact with Revit API: &lt;a href=&quot;http://revitpythonwrapper.readthedocs.io/en/latest/&quot;&gt;RevitPythonWrapper&lt;/a&gt; by &lt;a href=&quot;https://github.com/gtalarico&quot;&gt;Gui Talarico&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can install this module using the pyRevit extension manager. This module also works in Dynamo environment so it’ll be a good time investment for the user since it could be used in both Revit and Dynamo without any code changes.&lt;/p&gt;

&lt;h3 id=&quot;fact-2&quot;&gt;Fact 2&lt;/h3&gt;

&lt;p&gt;pyRevit includes &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; in its core libraries. The primary purpose of &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; module is to provide the required functionality for the standard pyRevit scripts.&lt;/p&gt;

&lt;h3 id=&quot;the-thing-that-i-wanted-to-talk-to-you-about&quot;&gt;The thing that I wanted to talk to you about:&lt;/h3&gt;

&lt;p&gt;I have started work to incorporate &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt; into pyRevit. Yes it is a dependency but I already have other dependencies (&lt;code class=&quot;highlighter-rouge&quot;&gt;Charts.js&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt; module for the output window) and &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt; is a very well-designed platform and I intend to use it more and more and have started work to contribute to it.&lt;/p&gt;

&lt;p&gt;Very soon, &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt; will be a standard part of pyRevit and without any changes to your code, it won’t be a required dependency for your tools anymore. I think this is great news.&lt;/p&gt;

&lt;p&gt;I’m moving some of the stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt; (Don’t worry I won’t break your code just now). I’ll be a lot more strict about stuff that goes into &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt;. If the idea is generic and it could be incorporated into &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt; I will do that.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; will be for the extra functionality that is heavily tied to the pyRevit itself. For example &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; has a sub-module called &lt;code class=&quot;highlighter-rouge&quot;&gt;patmaker&lt;/code&gt; that is the backend for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Make Pattern&lt;/code&gt; tool in pyRevit. This is a very specific module and it kinda is tied to pyRevit. &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; will be home to these type of functionality.&lt;/p&gt;

&lt;p&gt;For you python programmers and Revit radicals out there, I encourage you to invest time, implement your functionality ideas, and improve upon &lt;code class=&quot;highlighter-rouge&quot;&gt;RevitPythonWrapper&lt;/code&gt;. It is a very well-designed platform and I intend to use it more and more.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 11:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/04/01/revitutilsimprovements.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/04/01/revitutilsimprovements.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>pyRevit v4.3</title>
        <description>&lt;p&gt;Okay. We’re officially on 4.3 and here is a list of updates.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/pyrevitnewipy277.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/pyrevitnewipy277output.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;quick-links&quot;&gt;Quick links:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#new-ironpython-277&quot;&gt;New IronPython 2.7.7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pyrevit-usage-logging-system&quot;&gt;pyRevit Usage logging system&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-misc-changes&quot;&gt;Other misc changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;new-ironpython-277&quot;&gt;New IronPython 2.7.7&lt;/h2&gt;

&lt;p&gt;pyRevit is using the IronPython 2.7.7 now. There has been a lot of fixes and improvements to this IronPython version. The unicode improvements is what I’m happy about the most.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;pyrevit-usage-logging-system&quot;&gt;pyRevit Usage logging system&lt;/h2&gt;

&lt;p&gt;By popular demand, this feature is back but has been completely redesigned for flexibility and extensibility.&lt;/p&gt;

&lt;p&gt;For those of you that hadn’t use this feature on pyRevit 3, the usage logging system was used to log every usage of any of the pyRevit tools to a log file so we could calculate the amount of time saved during a time span. I specifically used this to show the management at my company that investing a little on custom tools is useful and saves us a couple of hours per person per week, which is a lot. It also makes users happier since now they have a way of circumventing Revit limitations.&lt;/p&gt;

&lt;p&gt;The usage logging system is back. It collects information about the executed pyRevit commands and logs this info to the destinations set by the user in pyRevit settings.&lt;/p&gt;

&lt;p&gt;Let’s take a deeper look at the log record. It’s composed in JSON format and looks like this:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogjsonrecord.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As you can see there are a lot of info about the command and the environment it is being executed under (Revit version, pyRevit version, session id,…). Most of the fields listed here are self-explanatory but I’d like to talk about two of the most important ones. The &lt;code class=&quot;highlighter-rouge&quot;&gt;resultcode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;commandresults&lt;/code&gt; fields.&lt;/p&gt;

&lt;h3 id=&quot;resultcode&quot;&gt;resultcode&lt;/h3&gt;

&lt;p&gt;This is an integer field and contains the result code that was returned by the pyRevit command executor. As of now, here is a list of pre-defined result codes:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RESULT_DICT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Succeeded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'SysExited'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ExecutionException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'CompileException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'UnknownException'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SysExited&lt;/code&gt; means that the pyRevit script used &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.exit()&lt;/code&gt; to exit from the command.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionException&lt;/code&gt; is when an exception occurs at command runtime.&lt;/li&gt;
  &lt;li&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;CompileException&lt;/code&gt; is errors in compiling code e.g. syntax errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command-results&quot;&gt;command results&lt;/h3&gt;

&lt;p&gt;In order to make this logging system more extensible, I added a dictionary to the log record that pyRevit commands can use to store custom parameters and values. You might decide to calculate the amount of time-saved inside each script and then report if to the usage logging system so later it can be used to calculate the total time saved by all your tools.&lt;/p&gt;

&lt;p&gt;For example, the pyRevit Reload command uses this to return the unique identifier of the newly loaded session to the usage logging system. This way the admin that is looking into the usage logs, can understand that this reload command execution, loaded pyRevit into a new session with the provided session id:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogcommandrecord.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This results dictionary is accessible through the &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptutils&lt;/code&gt; module. Here is how the Reload command is logging the new session id:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# this_script.results is the results dictionary&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# newsession is the name of the custom parameter to be added to results&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_session_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, to make this really easy, I have modified the results dictionary so you can type in the name of your custom return parameter as if it is a pre-existing parameter and assign a value to it.&lt;/p&gt;

&lt;h3 id=&quot;usage-logging-system-configurations&quot;&gt;Usage logging system configurations&lt;/h3&gt;

&lt;p&gt;To setup the usage logging system, go to the pyRevit settings and under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Usage Logging&lt;/code&gt; expander, flick the master switch.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogsettings.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As you can see the log system can write to two different destinations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logging to file:&lt;/strong&gt; logger will write all usage records to log files in the provided destination folder. The log files are written in JSON format and have &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; extension. pyRevit automatically names the log files based on the Revit version, username and session id so multiple users can log to the same destination:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogfiles.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logging to server:&lt;/strong&gt; logger will POST the usage records to the provided server url. I’m using &lt;a href=&quot;https://requestb.in&quot;&gt;requestb.in&lt;/a&gt; website in the example below. See how the server url is set in the configuration window and an example of a usage record, posted to the web server:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogsettingsserverurl.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogserverrecord.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewer-for-usage-logs&quot;&gt;Viewer for usage logs&lt;/h3&gt;

&lt;p&gt;And for you sysadmins who want to review the usage logs, there is also a log viewer tool under the newly created pyRevit Development extension (activate it in the Extension manager).&lt;/p&gt;

&lt;p&gt;This tool helps you browse through log files more easily, colour-codes the log entries based on the result code, shows the human-readable result codes instead of the actual integer values, and provides smart filtering and search. It also allows for parsing log files in a directory different than the currently set file logging directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogviewercommandresults.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagelogviewerfilter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each record, has a context menu that you can use to filter by session or copy information from that log record to clipboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/usagerecordcontextmenu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-misc-changes&quot;&gt;Other misc changes&lt;/h2&gt;

&lt;p&gt;There are a whole bunch of other changes in this revision. Here is a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improvements to &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt;: I’ll write another post about this as there are a lot of changes and improvements&lt;/li&gt;
  &lt;li&gt;pyRevit has a new core extension called &lt;code class=&quot;highlighter-rouge&quot;&gt;pyRevitDev&lt;/code&gt;. All the work-in-progress and test tools have been moved into this extension. It is disabled by default since most of you don’t need these tools but you can always activate it from the Extension manager.&lt;/li&gt;
  &lt;li&gt;The unittests module has also been cleaned up for a better test output.&lt;/li&gt;
  &lt;li&gt;The pyRevit executor and core has been cleaned up a lot.&lt;/li&gt;
  &lt;li&gt;I have converted all the explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;unicode&lt;/code&gt; in pyRevit code for unicode consistency.&lt;/li&gt;
  &lt;li&gt;Misc upgrades to tools. One is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Wipe model components&lt;/code&gt; tool that I’ll write about in a different post.&lt;/li&gt;
  &lt;li&gt;New environment variables that allow the usage logging system to read the most current logging configuration from the current pyRevit session. The list now also has a context menu to copy the env var value to clipboard:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/newenvvars.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 10:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/04/01/pyrevitfourthree.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/04/01/pyrevitfourthree.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Important: Upcoming core update</title>
        <description>&lt;p&gt;Please update your pyRevits. Here is why:&lt;/p&gt;

&lt;p&gt;The branch &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable-w12&lt;/code&gt; has a major update to the IronPython core. I’ve updated the IronPython to 2.7.7 which resolves a large number of errors with the IronPython engine including better unicode string support.&lt;/p&gt;

&lt;p&gt;I’ll merge this update at the end of March. But to be able to get this update gracefully you need to update pyRevit now so you can get the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt; tool that has been made smarter to look for core updates.&lt;/p&gt;

&lt;p&gt;This was my challenge:&lt;/p&gt;

&lt;p&gt;Revit keeps the &lt;code class=&quot;highlighter-rouge&quot;&gt;pyRevitLoader.dll&lt;/code&gt; open when you’re working with Revit and the pyRevit updater can not overwrite this dll. I had to figure out a way to fix this issue forever.&lt;/p&gt;

&lt;p&gt;So the solution that I came up with was to modify the updates to check the commit messages in the pyRevit repository and check to see if any of them includes &lt;code class=&quot;highlighter-rouge&quot;&gt;COREUPDATE&lt;/code&gt;. This effectively tells the updater that there is an core update available and pyRevit needs to be updated when Revit is closed.&lt;/p&gt;

&lt;p&gt;The updater will show this warning message and won’t update your installed pyRevit repo:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/coreupdatemessage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;So to update pyRevit when Revit is closed, go to the folder below under the installed folder and run the batch tool. The batch script will pull and merge the pyRevit repository.&lt;/p&gt;

&lt;p&gt;After update start Revit again and everything should be good to go.&lt;/p&gt;

&lt;h3 id=&quot;or&quot;&gt;OR&lt;/h3&gt;

&lt;p&gt;You can just remove and reinstall pyRevit :)&lt;/p&gt;

&lt;p&gt;Sorry. Updates are hard!&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Mar 2017 11:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/25/imminentupdate.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/25/imminentupdate.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Fancy forms for your scripts</title>
        <description>&lt;p&gt;Recently, I started adding more standard forms to the &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptutils.userinput&lt;/code&gt; module so simple scripts don’t have to deal with creating forms to ask for simple information. Currently I have developed two standard forms that I’m using on two of the scripts.&lt;/p&gt;

&lt;h3 id=&quot;selectfromlist&quot;&gt;SelectFromList&lt;/h3&gt;

&lt;p&gt;First is &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectFromList&lt;/code&gt;. A script can add a series of options to the form that users can select from. There is also a built-in filter option that filters the list. Here is how it looks and a quick intro on how it works:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils.userinput&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectFromList&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Option 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Option 2'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Option 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# shows the form and returns the selected options&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selected_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectFromList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Custom Form Title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;multiselect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# you can also pass a list of objects&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the form will show the str(object) of the objects in the list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActionOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option_name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Option 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Option 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selected_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectFromList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Currently, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Load Family Types&lt;/code&gt; tool uses this standard form:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/SelectFromList.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;selectfromcheckboxes&quot;&gt;SelectFromCheckBoxes&lt;/h3&gt;

&lt;p&gt;This also works very similarly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SelectFromList&lt;/code&gt;. The only difference is that since it deals with smarter choices, it needs a list of objects that define &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; parameters. &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; will be the name of the checkbox and &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; will be the state of the checkbox (&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CheckBoxOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_state&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# define the __nonzero__ method so you can use your objects in an &lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# if statement. e.g. if checkbox_option:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__nonzero__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;# __bool__ is same as __nonzero__ but is for python 3 compatibility&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__bool__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckBoxOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Option 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CheckBoxOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Option 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;all_checkboxes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SelectFromCheckBoxes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# now you can check the state of checkboxes in your program&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkbox&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_checkboxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# do stuff&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m revising the &lt;code class=&quot;highlighter-rouge&quot;&gt;Wipe Model Components&lt;/code&gt; to use this form. It helps the tool to be extensible, allowing all sorts of smart options based on the current model. You’ll see this update in the next revision.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/SelectFromCheckBoxes1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/SelectFromCheckBoxes2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Mar 2017 10:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/25/standardforms.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/25/standardforms.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Two more productivity tools</title>
        <description>&lt;p&gt;I’m working on a host of new changes to the core this week but I managed to add these two tools. One suggested by &lt;a href=&quot;https://github.com/thazell&quot;&gt;thazel&lt;/a&gt; under &lt;a href=&quot;https://github.com/eirannejad/pyRevit/issues/166&quot;&gt;issue #166&lt;/a&gt;, and another came out from a conversation I had with a colleague on an easier way to make placeholders and sheets.&lt;/p&gt;

&lt;h2 id=&quot;load-family-types&quot;&gt;Load family types:&lt;/h2&gt;

&lt;p&gt;This tool will look into the original family file of a selected family instance and will get a list of types that are available for that family. The user then selects the family types that are needed and the tool will load them into the model.&lt;/p&gt;

&lt;p&gt;This is especially helpful with families such as Structural Framing that have many types and not all the types need to be loaded in the model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exceptions:&lt;/strong&gt; There are instances that this tool can not find the original family file since it expects the family to know about its original saved location, which families usually do. I have tried to include descriptive prompts that inform the user on any errors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/loadmorefamtypes1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/loadmorefamtypes2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;batch-sheet-maker&quot;&gt;Batch Sheet Maker:&lt;/h2&gt;

&lt;p&gt;This is really a very simple tool and is helpful in creating a number of sheets or placeholders really quickly or to have a list of standard sheets and use this list to create sheets in many models and keep them consistent.&lt;/p&gt;

&lt;p&gt;The tool is pretty self-explanatory. Type in the sheet number and sheet name (separate them by a single tab), pick the sheet or placeholder options and create the sheets:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/batchsheetmaker.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Mar 2017 16:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/22/moretools.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/22/moretools.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>pyRevit unstable branch or how I learned to love unittest</title>
        <description>&lt;p&gt;I made a rookie mistake this past week. I made some changes to the way output window works and without fully testing it, pushed it to the pyRevit’s github repository. This broke pyRevit for some of you and I deeply apologise for that.&lt;/p&gt;

&lt;p&gt;To make sure this never happens again, I thought I can create a new unstable branch every week (This week’s is &lt;code class=&quot;highlighter-rouge&quot;&gt;unstable-w11&lt;/code&gt;), make my changes and improvements during the week, run tests over the weekend and fix any issue, and then fully commit the changes to the online pyRevit repository on github.&lt;/p&gt;

&lt;p&gt;pyRevit is still in it’s infancy and needs a lot of work. That’s why I like to get you the changes and updates as quickly as possible so you all are involved in the process and can plan your workflows accordingly or give me feedback on how you think certain features should work.&lt;/p&gt;

&lt;h2 id=&quot;revision-report-tool&quot;&gt;Revision report tool:&lt;/h2&gt;
&lt;p&gt;To showcase some of the power of the output window and also to make a useful tool that I can use during the Construction Admin of my current project, I added a tool to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Revisions&lt;/code&gt; pull down, that reports the current state of the revisions being made to the project.&lt;/p&gt;

&lt;p&gt;This output can be printed directly to a printer using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Print Preview&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Print&lt;/code&gt; options on the output window context menu (right-click).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/revisionreport.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-changes&quot;&gt;Other changes:&lt;/h2&gt;
&lt;p&gt;Anyway, I committed this week’s changes to the master. Here are a list of improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pattern maker now can export patterns to PAT files. I also made other changes to the pattern maker to improve performance with very small detail patterns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/exportpatfile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can set the height and width of charts using &lt;code class=&quot;highlighter-rouge&quot;&gt;.set_width()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.set_height()&lt;/code&gt; methods on the chart object:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_bar_chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;# in pixels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;To better control the output results use these methods on the output window:
    &lt;ul&gt;
      &lt;li&gt;Lock the output window size using &lt;code class=&quot;highlighter-rouge&quot;&gt;.lock_size()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;To add a page break use &lt;code class=&quot;highlighter-rouge&quot;&gt;.next_page()&lt;/code&gt; method. Any contents printed after this method, will be created on the new page when printing.&lt;/li&gt;
      &lt;li&gt;To add a horizontal line use &lt;code class=&quot;highlighter-rouge&quot;&gt;.insert_divider()&lt;/code&gt; method. This draws a horizontal line in the output window and is a great way to separate content.&lt;/li&gt;
      &lt;li&gt;If you’re using markdown or html output, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;.add_style()&lt;/code&gt; method to add &lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt; styling to the output window (this adds the style to the html head so it applies to html code that has been already printed as well):&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TITLE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_divider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a page break in html output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# adding css styles&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
table { width:100&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}
table, th, td { border-bottom: 1px solid #aaa; }
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Markdown module was also updated to 2.6.8&lt;/li&gt;
  &lt;li&gt;I created a pyRevit development tools package and moved the labs and work-in-progress tools into the extension. This extension is disabled by default so if you want to see it please activate it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Extensions&lt;/code&gt; tool. I added a Unit tests button to this extension and will work on creating multiple unit tests to automate testing of pyRevit components before publishing updates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/devtools.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Untill now, the output window had a output buffer size limit. IronPython’s stream breaks the output stream in chunks of 1024 characters. This means that if a script is printing a large string, or a big chunk of html data (could be a large graph for example), the output stream would break this stream into multiple pieces and in order to show them correctly in the html format, it would wrap each broken piece in a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag. This meant that the html code for the graph would be broken and not displayed correctly. I finally found a way to fix this issue.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 10:00:00 -0700</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/18/pyrevitweeklyunstable.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/18/pyrevitweeklyunstable.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>pyRevit v4.2</title>
        <description>&lt;p&gt;Till now pyRevit had a big issue. If you would keep using pyRevit for an extensive amount of time without restarting Revit, the IronPython engine would slowly leak memory and would make the C# garbage collector extremely slow. This would cause Revit to slow down, and halt for a few seconds after each command. I ended up using the Windows native Performance Monitor tool and finally figured out that this short halt was due to the garbage collector taking too much time to clean up the unused memory between Revit actions. (Monitored the &lt;code class=&quot;highlighter-rouge&quot;&gt;.NET CLR Memory&lt;/code&gt; usage for Revit, especifically &lt;code class=&quot;highlighter-rouge&quot;&gt;% of Time in GC&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Anyways, the problem is solved now. I also added a tool under &lt;code class=&quot;highlighter-rouge&quot;&gt;Labs&lt;/code&gt; pulldown that basically tests the IronPython engine under extreme use (Create an engine and run a script for 500 times). It also measures the execution time and draws a chart at the end.&lt;/p&gt;

&lt;p&gt;There are also code cleanups and improvements to the output window under this new update, and as I posted here before, the addition of the charts module to pyRevit.&lt;/p&gt;

&lt;p&gt;As always, looking forward to hearing your feedbacks.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/11/pyrevitfourtwo.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/03/11/pyrevitfourtwo.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
