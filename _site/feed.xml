<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyRevit blog</title>
    <description>IronPython scripts for Autodesk Revit
</description>
    <link>http://eirannejad.github.io/pyRevit/</link>
    <atom:link href="http://eirannejad.github.io/pyRevit/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Mar 2017 10:01:10 -0800</pubDate>
    <lastBuildDate>Sat, 04 Mar 2017 10:01:10 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>pyRevit Log Viewer</title>
        <description>&lt;p&gt;The log viewer tool is finally in good shape. This tool processes the log files (when logging to external file is activated in settings) and displays the log entries in a list.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/logviewer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The viewer, processes the time, date, entry type, and logging module for each log entry and compiles a list of filters that could be used to filter the entry list.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/logviewerfilter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;You can also search for specific terms in log messages:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/logviewersearch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This viewer helps me a lot in debugging the reported issues.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Feb 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/02/16/logviewer.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/02/16/logviewer.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Viva progress bars</title>
        <description>&lt;p&gt;The output window now has a progress bar! Yaay!&lt;/p&gt;

&lt;p&gt;(It’s the green line at the bottom of the output window)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/linkify.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Use it like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# update_progress( current_value, max_value )&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# so this means 50% progress&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# values can be any int or float. The function will do&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the math and will calculate the percentage of completion.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So let’s say your script is deleting some views. Using this method the script can update the progress bar as it is removing the views:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;view_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_views_to_be_deleted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;view_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;delete views&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_progress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
	&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Awesome isn’t it?&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Feb 2017 14:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/output/2017/02/11/progressbar.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/output/2017/02/11/progressbar.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
        <category>output</category>
        
      </item>
    
      <item>
        <title>Output Window Improvements</title>
        <description>&lt;p&gt;re: &lt;a href=&quot;https://github.com/eirannejad/pyRevit/issues/148&quot;&gt;Issue #148&lt;/a&gt; reported by &lt;a href=&quot;https://github.com/hdm-dt-fb&quot;&gt;hdm-dt-fb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m very excited about a new feature. This is the start of work on making the output window more interactive.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;current-output-window-custom-print-methods&quot;&gt;Current output window custom print methods:&lt;/h2&gt;

&lt;p&gt;By now, you probably know that the output window is a &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Windows.Forms.WebBrowser&lt;/code&gt; component. The &lt;code class=&quot;highlighter-rouge&quot;&gt;WebBrowser&lt;/code&gt; uses Internet Explorer as rendering engine. All the output coming from pyRevit are formatted in html and displayed. This means that pyRevit scripts can output images, links, and anything html really.&lt;/p&gt;

&lt;p&gt;There is a catch though. python outputs information about objects in this format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;type str&amp;gt;
&amp;lt;object Element Id at --- &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These outputs contain &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; characters that confuses the html engine due to their structural similarity with &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;The solution was to use a formatter function that converts the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; characters to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;clt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;cgt;&lt;/code&gt; and then converts them back later when actually printing the output. This helps the system distinguish between the actual html code and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; characters printed from python itself (Since they won’t be converted to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;clt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;cgt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I’ll write more about this later. Here is the formatter function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;html_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;lt;div&amp;gt;contents&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# this is the output. &amp;lt; and &amp;gt; are replaced with &amp;amp;clt; and &amp;amp;cgt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this string is sent to the output window&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&amp;amp;clt;div&amp;amp;cgt;contents&amp;amp;clt;/div&amp;amp;cgt;&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anyways,&lt;/p&gt;

&lt;p&gt;The output window provides two other custom print functions that build on top of this method. pyRevit scripts can import &lt;code class=&quot;highlighter-rouge&quot;&gt;this_script&lt;/code&gt; object from the &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptutils&lt;/code&gt; module and access these output window functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;print_code()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints contents formatted as a python script&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;python_script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
import sys
print(sys.paths)
&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python_script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;print_md()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# prints contents in mark-down format&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# e.g this script outputs a clickable link&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mark_down_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;[eirannejad](https://github.com/eirannejad)&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark_down_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;linkify&quot;&gt;Linkify:&lt;/h2&gt;

&lt;p&gt;Now there is a new method available for printing object element ids (The limitation for element ids is temporary. I’ll add more data types as I test and improve this feature). Using this method, the scripts can print the element ids of Revit elements that they’re working on and the user can select those elements by clicking on the element link. See the green rectangles in the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/linkify.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this is they’re created:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scriptutils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;revit_element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ElementId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clickable_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this_script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linkify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revit_element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Here is the element: {}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clickable_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That simple!
The major difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;linkify&lt;/code&gt; and other print functions is that &lt;code class=&quot;highlighter-rouge&quot;&gt;linkify&lt;/code&gt; doesn’t actually print the element id. It returns the generated properly-formatted html code for the link however. This way the script can format their output better and place the clickable link where they want it.&lt;/p&gt;

&lt;p&gt;Play with it and let me know of your comments. Read the section below if you’d like to know how the output window talks back to Revit.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&quot;the-love-affair-between-output-window-and-revit&quot;&gt;The love affair between output window and Revit:&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;linkify&lt;/code&gt; method generates an html link element that contains a special url. In the case of clickable element ids, this is how the url looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;revit://{command=&#39;select&#39;, data=&#39;123456&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first piece is the url protocol. This is really how the output window interacts with Revit. Whenever user clicks on a link with &lt;code class=&quot;highlighter-rouge&quot;&gt;revit://&lt;/code&gt; protocol, the output window calls a callback function defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;pyrevit.coreutils.console&lt;/code&gt; and passes on the url contents.&lt;/p&gt;

&lt;p&gt;From there, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pyrevit.coreutils.console&lt;/code&gt; module cleans up the url and passes it to &lt;code class=&quot;highlighter-rouge&quot;&gt;pyrevit.coreutils.rvtprotocol&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rvtprotocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleaned_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rvtprotocol&lt;/code&gt; module processes the json part of the url &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;command=&#39;select&#39;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;data=&#39;123456&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; (let’s call it payload) and calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; command and passes the &lt;code class=&quot;highlighter-rouge&quot;&gt;123456&lt;/code&gt; payload to it. It is up to the command to do whatever it needs to do with the provided data.&lt;/p&gt;

&lt;p&gt;I should mention that this json data payload was also created by the &lt;code class=&quot;highlighter-rouge&quot;&gt;rvtprotocol&lt;/code&gt; module in the first place. So when &lt;code class=&quot;highlighter-rouge&quot;&gt;linkify&lt;/code&gt; wants to create the clickable link, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;rvtprotocol.make_url(args)&lt;/code&gt; and passes on the given arguments (element ids in this case). &lt;code class=&quot;highlighter-rouge&quot;&gt;rvtprotocol&lt;/code&gt; picks the right command based on the input data types and asks the command to process the arguments and generate a json data payload. The command is responsible for generating a payload that it can process and understand later when used clicked on the link.&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Feb 2017 14:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/output/2017/02/11/linkify.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/output/2017/02/11/linkify.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
        <category>output</category>
        
      </item>
    
      <item>
        <title>Increment/Decrement Sheet Number</title>
        <description>&lt;p&gt;re: &lt;a href=&quot;https://github.com/eirannejad/pyRevit/issues/149&quot;&gt;Issue #149&lt;/a&gt; reported by &lt;a href=&quot;https://github.com/thazell&quot;&gt;thazell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Renamed and updated:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shift Selected Sheets One Up &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Decrement Selected Sheet Numbers&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Shift Selected Sheets One Up &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Increment Selected Sheet Numbers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were two scripts under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sheets&lt;/code&gt; pulldown that would increment and decrement the sheet number of the selected sheets. I had written these scripts a long time ago for personal use and really didn’t get the chance to revisit and make them smarter. They’re designed to rename sheets that are numbered in &lt;code class=&quot;highlighter-rouge&quot;&gt;A100&lt;/code&gt; format so they’d produce an error with sheets formatted as &lt;code class=&quot;highlighter-rouge&quot;&gt;A100a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;S-100&lt;/code&gt;, or similar.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/thazell&quot;&gt;thazell&lt;/a&gt; created the issue #149 to address this shortcoming. I had a chance this afternoon to create/find a proper increment/decrement function for strings and use it to increment and decrement sheet numbers in a smarter fashion. This new function has been added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;coreutils&lt;/code&gt; module and is available to scripts as well.&lt;/p&gt;

&lt;p&gt;Here is a couple of examples of how it would increment/decrement sheet numbers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Decremented &amp;lt;&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Original&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;&amp;gt; Incremented&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A099&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A100&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A101&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A099z&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A100a&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A100b&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S-101Y&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S-101Z&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S-102A&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M111-ZZ&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M112-AA&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M112-AB&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Thu, 26 Jan 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/26/sheetincrement.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/26/sheetincrement.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Updates to print tool</title>
        <description>&lt;p&gt;Taking to &lt;a href=&quot;https://github.com/ThubanPDX&quot;&gt;Austin Rosenfeld&lt;/a&gt; on printing Architectural sheets to PDF (in order) and combining all drawings from all disciplines into a single PDF, he suggested that the print tool should show the placeholder (non-printable) sheets and allow for indexing space for these sheets.&lt;/p&gt;

&lt;p&gt;As an example, Civil and Landscape drawings usually fall in between Cover sheet and Architectural sheets. By allowing indexing space, these sheets can be manually numbered later and added to the printed Architectural sheets folder so all of them can be combined in one pass into a single PDF document.&lt;/p&gt;

&lt;p&gt;So the Print Ordered Sheets tool has been updated and now shows the placeholder sheets and gives the user the option to allow indexing space:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/printorderedsheetsupdated.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 14:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/26/orderedprintupdate.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/26/orderedprintupdate.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>New print tool and Weekly change report</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/printorderedbutton.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was finally able to sit down and build a tool to print the project sheets in order. It is similar to the &lt;a href=&quot;https://github.com/McCulloughRT/PrintFromIndex&quot;&gt;PrintFromIndex&lt;/a&gt; tool developed by &lt;a href=&quot;https://github.com/McCulloughRT&quot;&gt;Ryan McCullough&lt;/a&gt; but it lists the sheets for the Selected Index in the same order as the index and also allows for quick last minute manual reordering. Update your pyRevit and give it a try. Here is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/printorderedsheets.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also here is a quick list of other misc changes that’s been made in the past week:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyRevitPlus&lt;/code&gt; extension updated for pyRevit v4 and added to extension manager&lt;/li&gt;
  &lt;li&gt;Added pages to the pyRevit website on creating and sharing custom extensions.&lt;/li&gt;
  &lt;li&gt;Default script naming has been revised to be more forgiving and include any script that ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;script.py&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;script.cs&lt;/code&gt;. Same applies to the config scripts. Website documentation has been revised to reflect this change.&lt;/li&gt;
  &lt;li&gt;Added Revit version information to the startup log&lt;/li&gt;
  &lt;li&gt;Started core documentation&lt;/li&gt;
  &lt;li&gt;Resolved issues with Sphinx autodoc system.&lt;/li&gt;
  &lt;li&gt;pyRevit seed documentation is created on &lt;a href=&quot;https://readthedocs.com&quot;&gt;readthedocs.com&lt;/a&gt; and documentation button added to pyRevit website homepage. pyRevit documentation is still work-in-progress. &lt;code class=&quot;highlighter-rouge&quot;&gt;Readthedocs&lt;/code&gt; will update the docs website based on the latest git repository changes.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 21 Jan 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/21/miscchanges.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/21/miscchanges.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Core Documentation: Lots of Docs</title>
        <description>&lt;p&gt;Now that the extension manager has been completed, it’s time for next phase which is documenting the pyRevit core library, so all you Reviteers can dive in and contribute to the core, helping making it better for everyone.&lt;/p&gt;

&lt;p&gt;Just so you know, I’ll be using &lt;a href=&quot;http://www.sphinx-doc.org&quot;&gt;Sphinx&lt;/a&gt; to compile the documentation from the &lt;a href=&quot;http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html&quot;&gt;Google-style docstrings&lt;/a&gt; in the source code. &lt;a href=&quot;https://github.com/gtalarico&quot;&gt;Gui talarico&lt;/a&gt; has also used Sphinx to create the documentation for the &lt;a href=&quot;http://revitpythonwrapper.readthedocs.io/en/latest/&quot;&gt;RevitPythonWrapper&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;There are also a few &lt;code class=&quot;highlighter-rouge&quot;&gt;readme.md&lt;/code&gt; files in the folders that gives you a basic understanding of how the repository is structured. They’re markdown file and you can read them on a normal text editor but I highly suggest getting into the habit of using &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; which is BTW the best text editor ever! Make sure you watch the video on the home page. It’s brilliant!&lt;/p&gt;

&lt;p&gt;Stay tuned…&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 16:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/17/coredocs.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/17/coredocs.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Extension Packages and v4.1</title>
        <description>&lt;p&gt;Okay,&lt;/p&gt;

&lt;p&gt;Extension packages system is fully functional and we’re officially in v4.1&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Open the Extension manager from the pyRevit slideout and give it a try.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;See &lt;a href=&quot;http://eirannejad.github.io/pyRevit/howtoaddscriptsandtabs&quot;&gt;Adding your own scripts&lt;/a&gt; on how to create your own extensions&lt;/li&gt;
  &lt;li&gt;See &lt;a href=&quot;http://eirannejad.github.io/pyRevit/sharingextensions&quot;&gt;Sharing Extensions&lt;/a&gt; on how to get your extensions added to the standard pyRevit extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://eirannejad.github.io/pyRevit/images/extensionstool.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to see your awesome tools!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/17/extensions.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/17/extensions.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Let&#39;s Huddle</title>
        <description>&lt;p&gt;Hello BIM lovers, python practitioners, pyRevit followers…&lt;/p&gt;

&lt;p&gt;I want to know you and hear about the stuff you’re doing with scripting in Revit. Github only shows me very limited information on the number of clones and unique visitors and most of the profiles don’t have any info on the profile owner. It feels impossible for me to find you and connect with you.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Well, almost… :D&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Drop me a line here and let’s talk. Let’s share ideas and tools and make Revit scripting easier and more enjoyable for everyone.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I want to know you.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Jan 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/14/community.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/14/community.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Added Anatomy of a Script page</title>
        <description>&lt;p&gt;I also added a page describing the basic setup of a pyRevit script and the utilities that are available to it through &lt;code class=&quot;highlighter-rouge&quot;&gt;scriptutils&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;revitutils&lt;/code&gt; modules. See the &lt;a href=&quot;http://eirannejad.github.io/pyRevit/anatomyofpyrevitscript&quot;&gt;Anatomy of a Script page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please keep in mind that pyRevit is a work in progress and we are always tweaking these these utilities to improve pyRevit.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 15:00:00 -0800</pubDate>
        <link>http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/10/addedscriptanatomy.html</link>
        <guid isPermaLink="true">http://eirannejad.github.io/pyRevit/pyrevit/update/2017/01/10/addedscriptanatomy.html</guid>
        
        
        <category>pyrevit</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
